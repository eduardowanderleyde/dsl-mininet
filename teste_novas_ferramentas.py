#!/usr/bin/env python3
"""
Teste das Novas Ferramentas Implementadas
Demonstra o uso do analisador de performance e gerador de relat√≥rios
"""

import os
import sys
import subprocess
from datetime import datetime

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üîß {title}")
    print("="*60)

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\nüìã {title}")
    print("-" * 40)

def run_command(command, description):
    """Executa comando e mostra resultado"""
    print(f"\nüîÑ {description}")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Sucesso!")
            if result.stdout.strip():
                print("Sa√≠da:")
                print(result.stdout)
        else:
            print("‚ùå Erro!")
            if result.stderr.strip():
                print("Erro:")
                print(result.stderr)
    except Exception as e:
        print(f"‚ùå Exce√ß√£o: {e}")

def test_analisador_performance():
    """Testa o analisador de performance"""
    print_header("TESTE DO ANALISADOR DE PERFORMANCE")
    
    # Verificar se h√° dados para analisar
    if not os.path.exists("results"):
        print("‚ùå Diret√≥rio 'results' n√£o encontrado!")
        print("üí° Execute primeiro um cen√°rio para gerar dados")
        return False
    
    csv_files = [f for f in os.listdir("results") if f.endswith('.csv')]
    if not csv_files:
        print("‚ùå Nenhum arquivo CSV encontrado em 'results'!")
        print("üí° Execute primeiro um cen√°rio para gerar dados")
        return False
    
    print(f"‚úÖ Encontrados {len(csv_files)} arquivos CSV para an√°lise")
    
    # Testar an√°lise de cobertura
    print_section("An√°lise de Cobertura")
    run_command("python3 analisador_performance_avancado.py analyze --scenario cenario_exemplo_1", 
                "Analisando cobertura do cen√°rio exemplo 1")
    
    # Testar detec√ß√£o de anomalias
    print_section("Detec√ß√£o de Anomalias")
    run_command("python3 analisador_performance_avancado.py anomalies --scenario cenario_exemplo_1", 
                "Detectando anomalias no cen√°rio exemplo 1")
    
    # Testar gera√ß√£o de mapa de calor
    print_section("Mapa de Calor")
    run_command("python3 analisador_performance_avancado.py heatmap --scenario cenario_exemplo_1 --output teste_heatmap.png", 
                "Gerando mapa de calor do cen√°rio exemplo 1")
    
    # Testar relat√≥rio completo
    print_section("Relat√≥rio Completo")
    run_command("python3 analisador_performance_avancado.py report --scenario cenario_exemplo_1 --output teste_relatorio.md", 
                "Gerando relat√≥rio completo do cen√°rio exemplo 1")
    
    return True

def test_gerador_relatorios():
    """Testa o gerador de relat√≥rios"""
    print_header("TESTE DO GERADOR DE RELAT√ìRIOS")
    
    # Verificar se h√° dados para analisar
    if not os.path.exists("results"):
        print("‚ùå Diret√≥rio 'results' n√£o encontrado!")
        return False
    
    # Testar relat√≥rio HTML
    print_section("Relat√≥rio HTML")
    run_command("python3 gerador_relatorios.py html --scenario cenario_exemplo_1 --output teste_relatorio.html", 
                "Gerando relat√≥rio HTML do cen√°rio exemplo 1")
    
    # Testar relat√≥rio Excel
    print_section("Relat√≥rio Excel")
    run_command("python3 gerador_relatorios.py excel --scenario cenario_exemplo_1 --output teste_relatorio.xlsx", 
                "Gerando relat√≥rio Excel do cen√°rio exemplo 1")
    
    return True

def test_interface_web_atualizada():
    """Testa a interface web atualizada"""
    print_header("TESTE DA INTERFACE WEB ATUALIZADA")
    
    print_section("Verifica√ß√£o da Interface Web")
    
    # Verificar se app.py foi atualizado
    if os.path.exists("app.py"):
        with open("app.py", "r") as f:
            content = f.read()
            if "executa_cenario_mesh_v3.py" in content:
                print("‚úÖ Interface web atualizada para usar vers√£o 3!")
            else:
                print("‚ö†Ô∏è Interface web ainda usa vers√£o antiga")
    else:
        print("‚ùå Arquivo app.py n√£o encontrado!")
    
    # Verificar se templates existem
    if os.path.exists("templates"):
        templates = os.listdir("templates")
        print(f"‚úÖ Templates encontrados: {len(templates)} arquivos")
        for template in templates:
            print(f"  - {template}")
    else:
        print("‚ùå Diret√≥rio templates n√£o encontrado!")
    
    return True

def test_instalacao_dependencias():
    """Testa se as depend√™ncias est√£o instaladas"""
    print_header("TESTE DE DEPEND√äNCIAS")
    
    required_packages = [
        "pandas", "numpy", "matplotlib", "seaborn", "openpyxl", "jinja2"
    ]
    
    print_section("Verificando Depend√™ncias")
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - Instalado")
        except ImportError:
            print(f"‚ùå {package} - N√£o instalado")
            return False
    
    print("\nüí° Para instalar depend√™ncias faltantes:")
    print("pip install pandas numpy matplotlib seaborn openpyxl jinja2")
    
    return True

def criar_dados_teste():
    """Cria dados de teste se n√£o existirem"""
    print_header("CRIA√á√ÉO DE DADOS DE TESTE")
    
    if os.path.exists("results") and any(f.endswith('.csv') for f in os.listdir("results")):
        print("‚úÖ Dados de teste j√° existem")
        return True
    
    print("üìù Criando dados de teste...")
    
    # Criar diret√≥rio results
    os.makedirs("results", exist_ok=True)
    
    # Criar dados de teste simulados
    import pandas as pd
    import numpy as np
    
    # Dados para station 1
    data1 = {
        'time': pd.date_range('2025-01-01 10:00:00', periods=10, freq='3S'),
        'position': ['"5.0,20.0"', '"15.0,20.0"', '"25.0,20.0"', '"35.0,20.0"', '"45.0,20.0"',
                    '"55.0,20.0"', '"65.0,20.0"', '"75.0,20.0"', '"85.0,20.0"', '"95.0,20.0"'],
        'rssi': [-100, -36, -36, -36, -45, -52, -58, -65, -72, -78],
        'latency_ms': [0.023, 0.028, 0.015, 0.041, 0.035, 0.042, 0.048, 0.055, 0.062, 0.068],
        'jitter_ms': [0.002, 0.003, 0.001, 0.004, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008],
        'packet_loss_percent': [0.0, 0.0, 0.0, 0.0, 0.1, 0.2, 0.3, 0.5, 0.8, 1.2],
        'connected_ap': ['none', 'ap1', 'ap1', 'ap1', 'ap1', 'ap2', 'ap2', 'ap2', 'ap2', 'ap2']
    }
    
    df1 = pd.DataFrame(data1)
    df1.to_csv("results/cenario_exemplo_1_sta1.csv", index=False)
    
    # Dados para station 2
    data2 = {
        'time': pd.date_range('2025-01-01 10:00:00', periods=8, freq='3S'),
        'position': ['"10.0,30.0"', '"20.0,30.0"', '"30.0,30.0"', '"40.0,30.0"',
                    '"50.0,30.0"', '"60.0,30.0"', '"70.0,30.0"', '"80.0,30.0"'],
        'rssi': [-45, -38, -42, -48, -55, -62, -68, -75],
        'latency_ms': [0.032, 0.028, 0.035, 0.041, 0.048, 0.055, 0.062, 0.068],
        'jitter_ms': [0.003, 0.002, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009],
        'packet_loss_percent': [0.0, 0.0, 0.1, 0.2, 0.4, 0.6, 0.9, 1.3],
        'connected_ap': ['ap1', 'ap1', 'ap1', 'ap2', 'ap2', 'ap2', 'ap2', 'ap2']
    }
    
    df2 = pd.DataFrame(data2)
    df2.to_csv("results/cenario_exemplo_1_sta2.csv", index=False)
    
    print("‚úÖ Dados de teste criados:")
    print("  - results/cenario_exemplo_1_sta1.csv (10 registros)")
    print("  - results/cenario_exemplo_1_sta2.csv (8 registros)")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE DAS NOVAS FERRAMENTAS IMPLEMENTADAS")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Teste 1: Depend√™ncias
    if not test_instalacao_dependencias():
        print("\n‚ùå Depend√™ncias n√£o est√£o instaladas!")
        print("üí° Execute: pip install -r requirements.txt")
        return
    
    # Teste 2: Criar dados de teste se necess√°rio
    criar_dados_teste()
    
    # Teste 3: Analisador de Performance
    test_analisador_performance()
    
    # Teste 4: Gerador de Relat√≥rios
    test_gerador_relatorios()
    
    # Teste 5: Interface Web
    test_interface_web_atualizada()
    
    print_header("RESUMO DOS TESTES")
    print("‚úÖ Testes conclu√≠dos!")
    print("\nüìÅ Arquivos gerados:")
    
    generated_files = []
    for file in os.listdir("."):
        if file.startswith("teste_") or file.startswith("heatmap_") or file.startswith("report_"):
            generated_files.append(file)
    
    if generated_files:
        for file in generated_files:
            print(f"  - {file}")
    else:
        print("  - Nenhum arquivo de teste gerado")
    
    print("\nüéØ Pr√≥ximos passos:")
    print("1. Abra os relat√≥rios HTML gerados no navegador")
    print("2. Analise os mapas de calor PNG")
    print("3. Abra os relat√≥rios Excel no LibreOffice/Excel")
    print("4. Use a interface web atualizada: python3 app.py")
    
    print("\nüí° Para mais informa√ß√µes, consulte:")
    print("- SUGESTOES_MELHORIAS_FERRAMENTAS.md")
    print("- analisador_performance_avancado.py --help")
    print("- gerador_relatorios.py --help")

if __name__ == "__main__":
    main() 